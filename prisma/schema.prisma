generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId              String   @unique
  username             String   @unique
  name                 String?
  bio                  String?
  location             String?
  website              String?
  primaryInstrument    String?
  secondaryInstruments String[]
  primaryGenre         String?
  otherGenres          String[]
  experienceLevel      String?
  influences           String?
  lookingFor           String?
  imageUrl             String?
  emailAddress         String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  tracks               Track[]
  sentMessages         Message[] // 追加
}

model Track {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String?
  audioUrl         String
  userId           String    @db.ObjectId
  genre            String?
  bpm              Int?
  key              String?
  mood             String?
  instrumentalType String?
  recordLabel      String?
  releaseDate      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// チャット機能のためのモデル
model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  participantIds String[]  @db.ObjectId // 参加者のユーザーID配列
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageAt DateTime?
  status        String    @default("active") // active, archived, etc
  creditUsed    Boolean   @default(true)     // クレジットを使用したかどうか
  messages      Message[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  senderId       String       @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  readAt         DateTime?    // 既読日時
  // リレーション
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id])
}